import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{o as c,c as d,f as r,a as e,b as t,e as a}from"./app-1a70ebab.js";const p={},s=e("h1",{id:"vue3-和-vue2的区别",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#vue3-和-vue2的区别","aria-hidden":"true"},"#"),t(" Vue3 和 Vue2的区别")],-1),n=a('<p><code>Vue</code> 内部根据功能可以被分为三个大的模块：<strong>响应性 <code>reactivite</code>、运行时 <code>runtime</code>、编辑器 <code>compiler</code></strong>，以及一些小的功能点。那么要说 <code>vue2</code> 与 <code>vue3</code> 的区别，我们需要从这三个方面加小的功能点进行说起。</p><h2 id="响应性-reactivite" tabindex="-1"><a class="header-anchor" href="#响应性-reactivite" aria-hidden="true">#</a> <strong>响应性 <code>reactivite</code></strong>：</h2><p><code>vue2</code> 的响应性主要依赖 <code>Object.defineProperty</code> 进行实现，但是 <code>Object.defineProperty</code> 只能监听 <strong>指定对象的指定属性的 <code>getter</code> 行为和 <code>setter</code> 行为</strong>，那么这样在某些情况下就会出现问题。</p><p><strong>什么问题呢？</strong></p><p>比如说：我们在 <code>data</code> 中声明了一个对象 <code>person</code> ，但是在后期为 <code>person</code> 增加了新的属性，那么这个新的属性就会失去响应性。想要解决这个问题其实也非常的简单，可以通过 <code>Vue.$set</code> 方法来增加 <strong>指定对象指定属性的响应性</strong>。但是这样的一种方式，在 <code>Vue</code> 的自动响应性机制中是不合理。</p><p>所以在 <code>Vue3</code> 中，<code>Vue</code> 引入了反射和代理的概念，所谓反射指的是 <code>Reflect</code>，所谓代理指的是 <code>Proxy</code>。我们可以利用 <code>Proxy</code> 直接代理一个普通对象，得到一个 <code>proxy 实例</code> 的代理对象。在 <code>vue3</code> 中，这个过程通过 <code>reactive</code> 这个方法进行实现。</p><p>但是 <code>proxy</code> 只能实现代理复杂数据类型，所以 <code>vue</code> 额外提供了 <code>ref</code> 方法，用来处理简单数据类型的响应性。<code>ref</code> 本质上并没有进行数据的监听，而是构建了一个 <code>RefImpl</code> 的类，通过 <code>set</code> 和 <code>get</code> 标记了 <code>value</code> 函数，以此来进行的实现。所以 <code>ref</code> 必须要通过 <code>.value</code> 进行触发，之所以要这么做本质是调用 <code>value 方法</code>。</p><h2 id="运行时-runtime" tabindex="-1"><a class="header-anchor" href="#运行时-runtime" aria-hidden="true">#</a> <strong>运行时 <code>runtime</code></strong>：</h2><p>所谓的运行时，大多数时候指的是 <code>renderer 渲染器</code>，渲染器本质上是一个对象，内部主要三个方法 <code>render、hydrate、createApp</code> ，其中 <code>render</code> 主要处理渲染逻辑，<code>hydrate</code> 主要处理服务端渲染逻辑，而 <code>createApp</code> 就是创建 <code>vue</code> 实例的方法。</p><p>这里咱们主要来说 <code>render 渲染函数</code>，<code>vue3</code> 中为了保证宿主环境与渲染逻辑的分离，把所有与宿主环境相关的逻辑进行了抽离，通过接口的形式进行传递。这样做的目的其实是为了解绑宿主环境与渲染逻辑，以保证 <code>vue</code> 在非浏览器端的宿主环境下可以正常渲染。</p><h2 id="编辑器-compiler" tabindex="-1"><a class="header-anchor" href="#编辑器-compiler" aria-hidden="true">#</a> <strong>编辑器 <code>compiler</code></strong>：</h2><p><code>vue</code> 中的 <code>compiler</code> 其实是一个 <code>DSL（特定领域下专用语言编辑器）</code> ，其目的是为了把 <code>template 模板</code> 编译成 <code>render</code> 函数。 逻辑主要是分成了三大步： <code>parse、transform 和 generate</code>。其中 <code>parse</code> 的作用是为了把 <code>template</code> 转化为 <code>AST（抽象语法树）</code>，<code>transform</code> 可以把 <code>AST（抽象语法树）</code> 转化为 <code>JavaScript AST</code>，最后由 <code>generate</code> 把 <code>JavaScript AST</code> 通过转化为 <code>render 函数</code>。转化的过程中会涉及到一些稍微复杂的概念，比如 <strong>有限自动状态机</strong> 这个就不再这里展开说了。</p><p>除此之外，还有一些其他的变化。比如 <code>vue3</code> 新增的 <code>composition API</code>。 <code>composition API</code> 在 <code>vue3.0</code> 和 <code>vue3.2</code> 中会有一些不同的呈现，比如说：最初的 <code>composition API</code> 以 <code>setup</code> 函数作为入口函数， <code>setup</code> 函数必须返回两种类型的值：第一是对象，第二是函数。</p><p>当 <code>setup</code> 函数返回对象时，对象中的数据或方法可以在 <code>template</code> 中被使用。当 <code>setup</code> 函数返回函数时，函数会被作为 <code>render</code> 函数。</p><p>但是这种 <code>setup</code> 函数的形式并不好，因为所有的逻辑都集中在 <code>setup</code> 函数中，很容易出现一个巨大的 <code>setup</code> 函数，我们把它叫做巨石（屎山）函数。所以 <code>vue 3.2</code> 的时候，新增了一个 <code>script setup</code> 的语法糖，尝试解决这个问题。目前来看 <code>script setup</code> 的呈现还是非常不错的。</p><p>除此之外还有一些小的变化，比如 <code>Fragment、Teleport、Suspense</code> 等等，这些就不去说了...</p>',16);function i(u,v){return c(),d("div",null,[s,r(" more "),n])}const l=o(p,[["render",i],["__file","vue3_vue2.html.vue"]]);export{l as default};
