import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as c,c as i,f as u,a as s,t as e,b as n,d as t,e as o}from"./app-f7e86fa7.js";const k="/assets/生命周期-cb5b181b.png",d="/assets/vueComponent-628e740f.png",v={},m=s("h1",{id:"vue2学习笔记-基础知识",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#vue2学习笔记-基础知识","aria-hidden":"true"},"#"),n(" Vue2学习笔记-基础知识")],-1),b=s("h2",{id:"初识vue",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#初识vue","aria-hidden":"true"},"#"),n(" 初识Vue")],-1),g=s("li",null,"想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象",-1),h=s("li",null,"root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法",-1),y=s("li",null,"root容器里的代码被称为【Vue模板】",-1),q=s("li",null,"Vue实例和容器是一一对应的；",-1),f=s("li",null,"真实开发中只有一个Vue实例，并且会配合着组件一起使用；",-1),x=s("li",null,"一旦data中的数据发生改变，那么模板中用到该数据的地方也会自动更新；",-1),w=o(`<p><strong>注意区分js表达式和js代码（语句</strong>）<br> 表达式：一个表达式会生成一个值，可以放在任何一个需要值的地方；<br> js代码（语句） [<code>if(){};for(){}</code>]</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;root&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

<span class="token comment">//创建一个Vue实例</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;.root&#39;</span><span class="token punctuation">,</span>        <span class="token comment">//el用于指定当前Vue实例为哪个容器服务，值通常css选择器字符串</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>             <span class="token comment">//data中用于存储数据，数据供el所指定的容器去使用，值我们暂时先写成一个对象。</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;aaaa123&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">address</span><span class="token operator">:</span><span class="token string">&#39;江苏&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vue模板语法有两大类" tabindex="-1"><a class="header-anchor" href="#vue模板语法有两大类" aria-hidden="true">#</a> Vue模板语法有两大类</h2><h3 id="_1、插值语法" tabindex="-1"><a class="header-anchor" href="#_1、插值语法" aria-hidden="true">#</a> 1、插值语法</h3>`,4),_=s("strong",null,"功能：",-1),j=s("br",null,null,-1),V=s("strong",null,"写法：",-1),S=o(`<h3 id="_2、指令语法" tabindex="-1"><a class="header-anchor" href="#_2、指令语法" aria-hidden="true">#</a> 2、指令语法</h3><p><strong>功能：</strong> 用于解析标签（包括：标签属性、标签体内容、绑定事件......）<br><strong>举例：</strong> v-bind:href=&quot;xxx&quot; 或 简写为 :href=&quot;xxx&quot;,xxx同样要写js表达式，且可以直接读取到data中的所有属性。</p><blockquote><p><strong>备注</strong>：Vue中有很多的指令，且形式都是：v-???。此处我们只是拿v-bind举个例子</p></blockquote><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>school.url<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点我去学习<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>     <span class="token comment">&lt;!--  v-bind:动态绑定，将“”中的东西转成js表达式   --&gt;</span>
<span class="token comment">&lt;!-- v-bind可以简写成冒号： --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hello<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点我去{{school.name}}学习<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据绑定" tabindex="-1"><a class="header-anchor" href="#数据绑定" aria-hidden="true">#</a> 数据绑定</h2><h3 id="vue中有两种数据绑定的方式" tabindex="-1"><a class="header-anchor" href="#vue中有两种数据绑定的方式" aria-hidden="true">#</a> vue中有两种数据绑定的方式</h3><p><strong>1. 单向绑定(v-bind)：</strong> 数据只能从data流向页面。<br><strong>2. 双向绑定(v-model)：</strong> 数据不仅能从data流向页面，还可以从页面流向data。</p><blockquote><p><strong>备注：</strong></p><ul><li>双向绑定一般都应用在表单类元素上（如：input、select等）</li><li>v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值</li></ul></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;root&quot;</span><span class="token operator">&gt;</span>
    单向数据绑定：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> v<span class="token operator">-</span>bind<span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">&quot;name&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span>
    双向数据绑定：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> v<span class="token operator">-</span>model<span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">&quot;name&quot;</span><span class="token operator">&gt;</span>
    <span class="token comment">// 如下代码是错误的，因为v-model只能应用在表单类元素（输入类元素）上，得有value值 </span>
    <span class="token operator">&lt;</span>h2 v<span class="token operator">-</span>model<span class="token operator">:</span>x<span class="token operator">=</span><span class="token string">&quot;name&quot;</span><span class="token operator">&gt;</span>你好啊<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="data与el的两种写法" tabindex="-1"><a class="header-anchor" href="#data与el的两种写法" aria-hidden="true">#</a> data与el的两种写法</h2><h3 id="_1-el的两种写法" tabindex="-1"><a class="header-anchor" href="#_1-el的两种写法" aria-hidden="true">#</a> 1.el的两种写法</h3><h4 id="_1-new-vue的时候配置el属性" tabindex="-1"><a class="header-anchor" href="#_1-new-vue的时候配置el属性" aria-hidden="true">#</a> (1).new Vue的时候配置el属性</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token comment">//el:&#39;#root&#39;,       //el的第一种写法</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-先创建vue实例-随后再通过vm-mount-root-指定el的值。" tabindex="-1"><a class="header-anchor" href="#_2-先创建vue实例-随后再通过vm-mount-root-指定el的值。" aria-hidden="true">#</a> (2).先创建Vue实例，随后再通过<code>vm.$mount(&#39;#root&#39;)</code>指定el的值。</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span>
v<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">)</span>    <span class="token comment">//el的第二种写法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-data的两种写法" tabindex="-1"><a class="header-anchor" href="#_2-data的两种写法" aria-hidden="true">#</a> 2.data的两种写法</h3><h4 id="_1-对象式" tabindex="-1"><a class="header-anchor" href="#_1-对象式" aria-hidden="true">#</a> (1).对象式</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>              <span class="token comment">//data的第一种写法：对象式</span>
   <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;hobo&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-函数式" tabindex="-1"><a class="header-anchor" href="#_2-函数式" aria-hidden="true">#</a> (2).函数式</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>data() {      //data的第二种写法：函数式
   console.log(&#39;@@@&#39;,this);    //此处的this是Vue的实例对象
   return{
       name:&#39;xiaoyu&#39;   
   }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如何选择：</strong> 目前哪种写法都可以，以后学习到<strong>组件</strong>时，data<strong>必须使用函数式</strong>，否则会报错。</p><h3 id="_3-一个重要的原则" tabindex="-1"><a class="header-anchor" href="#_3-一个重要的原则" aria-hidden="true">#</a> 3.一个重要的原则</h3><p>由<strong>Vue</strong>管理的函数，<strong>一定不要写箭头函数</strong>，一旦写了箭头函数，this就不再是Vue实例了。</p><h2 id="数据代理" tabindex="-1"><a class="header-anchor" href="#数据代理" aria-hidden="true">#</a> 数据代理</h2><h3 id="_1-object-defineproperty" tabindex="-1"><a class="header-anchor" href="#_1-object-defineproperty" aria-hidden="true">#</a> 1.Object.defineproperty</h3><p>defineproperty方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象和get读取/set修改。<br> 通过Object.defineproperty直接定义的属性不可以被枚举（不能参与遍历）、修改和删除，必须通过enumrable、writable、configurable来控制属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">18</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>           <span class="token comment">//设置person中的age属性的值</span>
    <span class="token literal-property property">enumerable</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">//控制属性是否可以枚举，默认值是false</span>
    <span class="token literal-property property">writable</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token comment">//控制属性是否可以被修改，默认值是false</span>
    <span class="token literal-property property">configurable</span><span class="token operator">:</span><span class="token boolean">true</span>   <span class="token comment">//控制属性是否可以被删除，默认值是false</span>
    <span class="token comment">//当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> number
    <span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token comment">//当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值</span>
    <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;有人修改了age属性，且值是&#39;</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        number <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-何为数据代理" tabindex="-1"><a class="header-anchor" href="#_2-何为数据代理" aria-hidden="true">#</a> 2.何为数据代理？</h3><p><strong>通过一个对象代理对另一个对象中属性的操作 读/写</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">}</span>
<span class="token comment">// obj2可以直接读取和修改obj的属性</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> obj<span class="token punctuation">.</span>x
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>
        obj<span class="token punctuation">.</span>x<span class="token operator">=</span>value
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-vue中的数据代理" tabindex="-1"><a class="header-anchor" href="#_3-vue中的数据代理" aria-hidden="true">#</a> 3.Vue中的数据代理</h3><p>通过vm对象来代理data对象中属性的操作（读/写）</p><h3 id="_4-vue中数据代理的好处" tabindex="-1"><a class="header-anchor" href="#_4-vue中数据代理的好处" aria-hidden="true">#</a> 4.Vue中数据代理的好处</h3><p>更加方便的操作data中的数据</p><h3 id="_5-基本原理" tabindex="-1"><a class="header-anchor" href="#_5-基本原理" aria-hidden="true">#</a> 5.基本原理</h3><ul><li>通过Object.defineProperty()把data对象中所有属性添加到vm上。</li><li>为每一个添加到vm上的属性，都指定一个getter/setter。</li><li>在getter/setter内部去操作（读/写）data中对应的属性。</li></ul><h2 id="事件处理" tabindex="-1"><a class="header-anchor" href="#事件处理" aria-hidden="true">#</a> 事件处理</h2><h3 id="事件的使用" tabindex="-1"><a class="header-anchor" href="#事件的使用" aria-hidden="true">#</a> 事件的使用：</h3><ol><li>使用v-on:xxx 或 @xxx 绑定是事件，其中xxx是事件名；</li><li>事件的回调需要配置在methods对象中，最终会在vm上；</li><li>methods中配置的函数，不要使用箭头函数！否则this就不是vm了；</li><li>methods中配置的函数，都是被Vue所管理的函数，this的指向是vm或组件实例对象；</li><li>@click=&quot;demo&quot; 和@click=&quot;demo($event)&quot;效果一样，但后者可以传参。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>div id<span class="token operator">=</span><span class="token string">&quot;root&quot;</span><span class="token operator">&gt;</span>
    <span class="token comment">// &lt;button v-on:click=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt;</span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;showInfo1&quot;</span><span class="token operator">&gt;</span><span class="token function">点我提示信息1</span><span class="token punctuation">(</span>不传参<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;showInfo2(66,$event)&quot;</span><span class="token operator">&gt;</span><span class="token function">点我提示信息2</span><span class="token punctuation">(</span>传参<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>   <span class="token comment">//在DOM事件的回调函数中传入参数\`$event\`，可以获取到该事件的事件对象</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;hobo&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token function">showInfo1</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//console.log(this);        //此处的this是vm</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;同学你好!&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">showInfo2</span><span class="token punctuation">(</span><span class="token parameter">number<span class="token punctuation">,</span>a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//console.log(this);        //此处的this是vm</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;同学你好!!!&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vue中的事件修饰符" tabindex="-1"><a class="header-anchor" href="#vue中的事件修饰符" aria-hidden="true">#</a> Vue中的事件修饰符</h3><ol><li>prevent：阻止默认事件（常用）；</li><li>stop：阻止冒泡事件（常用）；</li><li>once：事件只触发一次（常用）；</li><li>capture：使用事件的捕获模式；</li><li>self：只有event.target是当前操作的元素时才触发事件；</li><li>passive：事件的默认行为立即执行，无需等待事件回调执行完毕；</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;root&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>欢迎来到<span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>学习<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
    <span class="token comment">// 阻止默认事件（常用） </span>
    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&quot;http://www.atguigu.com&quot;</span> @click<span class="token punctuation">.</span>prevent<span class="token operator">=</span><span class="token string">&quot;showInfo&quot;</span><span class="token operator">&gt;</span>点我提示信息<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>
    <span class="token comment">// 阻止冒泡事件（常用） </span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;demo1&quot;</span> @click<span class="token operator">=</span><span class="token string">&quot;showInfo&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>stop<span class="token operator">=</span><span class="token string">&quot;showInfo&quot;</span><span class="token operator">&gt;</span>点我提示信息<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token comment">// 事件只触发一次（常用） </span>
    <span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>once<span class="token operator">=</span><span class="token string">&quot;showInfo&quot;</span><span class="token operator">&gt;</span>点我提示信息<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token comment">// 使用事件的捕获模式；</span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;box1&quot;</span> @click<span class="token punctuation">.</span>capture<span class="token operator">=</span><span class="token string">&quot;showMsg(1)&quot;</span><span class="token operator">&gt;</span>
        div1
        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;box2&quot;</span> @click<span class="token operator">=</span><span class="token string">&quot;showMsg(2)&quot;</span><span class="token operator">&gt;</span>
            div2
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span> 
    <span class="token comment">// 只有event.target是当前操作的元素时才触发事件 </span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;demo1&quot;</span> @click<span class="token punctuation">.</span>self<span class="token operator">=</span><span class="token string">&quot;showInfo&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;showInfo&quot;</span><span class="token operator">&gt;</span>点我提示信息<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token comment">// 事件的默认行为立即执行，无需等待事件回调执行完毕 </span>
    <span class="token comment">// &lt;ul class=&quot;list&quot; @scroll=&quot;demo&quot;&gt; </span>
    <span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;list&quot;</span> @wheel<span class="token punctuation">.</span>passive<span class="token operator">=</span><span class="token string">&quot;demo&quot;</span><span class="token operator">&gt;</span> 
        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vue中的键盘事件" tabindex="-1"><a class="header-anchor" href="#vue中的键盘事件" aria-hidden="true">#</a> Vue中的键盘事件</h3><ol><li>Vue未提供别名的按键，可以使用按键原始的key值去绑定，但要注意转为<strong>kebab-case（短横线命名）</strong></li><li>系统修饰键（用法特殊）：ctrl、alt、shift、meta<br> (1).配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发<br> (2).配合keydown使用，正常触发事件。</li><li>也可以使用keyCode去指定具体的按键（已废弃，不推荐）</li><li>Vue.config.keyCodes。自定义键名 = 键码，可以去定制按键别名</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;root&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> placeholder<span class="token operator">=</span><span class="token string">&quot;按下回车提示输入&quot;</span> @keyup<span class="token punctuation">.</span>caps<span class="token operator">-</span>lock<span class="token operator">=</span><span class="token string">&quot;showInfo&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> placeholder<span class="token operator">=</span><span class="token string">&quot;按下回车提示输入&quot;</span> @keydown<span class="token punctuation">.</span>tab <span class="token operator">=</span><span class="token string">&quot;showInfo&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> placeholder<span class="token operator">=</span><span class="token string">&quot;按下回车提示输入&quot;</span> @keyup<span class="token punctuation">.</span>ctrl<span class="token operator">=</span><span class="token string">&quot;showInfo&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> placeholder<span class="token operator">=</span><span class="token string">&quot;按下回车提示输入&quot;</span> @keyup<span class="token punctuation">.</span><span class="token number">13</span><span class="token operator">=</span><span class="token string">&quot;showInfo&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> placeholder<span class="token operator">=</span><span class="token string">&quot;按下回车提示输入&quot;</span> @keyup<span class="token punctuation">.</span>huiche<span class="token operator">=</span><span class="token string">&quot;showInfo&quot;</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>keyCodes<span class="token punctuation">.</span>huiche <span class="token operator">=</span> <span class="token number">13</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="计算属性" tabindex="-1"><a class="header-anchor" href="#计算属性" aria-hidden="true">#</a> 计算属性</h2><ol><li><strong>定义</strong>：要用的属性不存在，要通过已有属性计算得来。</li><li><strong>原理</strong>：底层借助了Object.defineproperty方法提供的getter和setter。</li><li><strong>get函数什么时候执行？</strong><ol><li>初次读取fullName时。</li><li>所依赖的数据发生变化时。</li></ol></li><li><strong>优势</strong>：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便。</li></ol><blockquote><p><strong>备注</strong>：</p><ol><li>计算属性最终会出现在vm上，直接读取使用即可。</li><li>如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变。</li></ol></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;root&quot;</span><span class="token operator">&gt;</span>
    姓：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;firstName&quot;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>br<span class="token operator">&gt;</span>
    名：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;lastName&quot;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>br<span class="token operator">&gt;</span>
    全名：<span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>fullName<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">firstName</span><span class="token operator">:</span><span class="token string">&#39;张&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">lastName</span><span class="token operator">:</span><span class="token string">&#39;三&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">/*完整写法：   
        fullName:{
            //get有什么作用？当有人读取fullName时，get就会被调用，且返回值就作为fullName的值
            //get什么时候调用？1.初次读取fullName时。2.所依赖的数据发生变化时。
            get(){
                return this.firstName.slice(0,3) + &#39;-&#39; + this.lastName
            },
            //set什么时候调用？当fullName被修改时
            set(value ){
                const arr = value.split(&#39;-&#39;)
                this.firstName = arr[0]
                this.lastName = arr[1]
            }
        } */</span>
        <span class="token comment">//简写</span>
        <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="监视属性" tabindex="-1"><a class="header-anchor" href="#监视属性" aria-hidden="true">#</a> 监视属性</h2><h3 id="监视属性watch" tabindex="-1"><a class="header-anchor" href="#监视属性watch" aria-hidden="true">#</a> 监视属性watch</h3><ol><li>当被监视的属性变化时，回调函数自动调用，进行相关操作</li><li>监视的属性必须存在，才能进行监视！！</li><li>监视的两种写法： <ol><li>new Vue时传入watch配置</li><li>通过vm.$watch监视</li></ol></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">info</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token comment">// immediate:true,          初始化时让handler调用一下</span>
        <span class="token comment">//handler什么时候调用？当isHost发生改变时。</span>
        <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;info被修改了&#39;</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//简写</span>
    <span class="token comment">/* info(newValue,oldValue){
        console.log(&#39;info被修改了&#39;,newValue,oldValue);
    } */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="深度监视" tabindex="-1"><a class="header-anchor" href="#深度监视" aria-hidden="true">#</a> 深度监视</h3><ol><li>Vue中的watch默认不监测对象内部的改变（一层）</li><li>配置deep:true可以监测对象内部值改变（多层）</li></ol><blockquote><p>备注</p><ol><li>Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以</li><li>使用watch时根据数据的具体结构，决定是否采用深度监视</li></ol></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;root&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>a的值是<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">{</span>numbers<span class="token punctuation">.</span>a<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;numbers.a++&quot;</span><span class="token operator">&gt;</span>点我让a<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>b的值是<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">{</span>numbers<span class="token punctuation">.</span>b<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;numbers.b++&quot;</span><span class="token operator">&gt;</span>点我让b<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;numbers = {a:666,b:888}&quot;</span><span class="token operator">&gt;</span>彻底替换掉numbers<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token literal-property property">watch</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token comment">/*监视多级结构中某个属性的变化
    &#39;numbers.a&#39;:{
        handler(){
            console.log(&#39;a被改变了&#39;);
        }
    } */</span>
    <span class="token comment">//监视多级结构中所有属性的变化</span>
    <span class="token literal-property property">numbers</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">deep</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;numbers被改变了&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="computed-和-watch之间的区别" tabindex="-1"><a class="header-anchor" href="#computed-和-watch之间的区别" aria-hidden="true">#</a> computed 和 watch之间的区别</h3><ol><li>computed能完成的功能，watch都能完成</li><li>watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作</li></ol><h3 id="两个重要的小原则" tabindex="-1"><a class="header-anchor" href="#两个重要的小原则" aria-hidden="true">#</a> 两个重要的小原则</h3><ol><li>所有被Vue管理的函数，最好写成普通函数，这样this的指向才是vm或组件实例对象</li><li>所有不被Vue所管理的函数（定时器回调函数，ajax回调函数，promise的回调函数等），最好写成箭头函数，<br> 这样this的指向才是vm或组件实例对象</li></ol><h2 id="绑定样式" tabindex="-1"><a class="header-anchor" href="#绑定样式" aria-hidden="true">#</a> 绑定样式</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;root&quot;</span><span class="token operator">&gt;</span>
    <span class="token comment">// 绑定class样式--字符串方法，适用于：样式的类名不确定，需要动态指定   </span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;basic&quot;</span> <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;mood&quot;</span> @click<span class="token operator">=</span><span class="token string">&quot;chaneMood&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span>
    <span class="token comment">// 绑定class样式--数组方法，适用于：要绑定的样式个数不确定，名字也不确定    </span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;basic&quot;</span> <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;arr&quot;</span> <span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span>
    <span class="token comment">// 绑定class样式--对象方法，适用于：要绑定的样式个数确定，名字也确定，但要动态决定用不用    </span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;basic&quot;</span> <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;classObj&quot;</span> <span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span>
    <span class="token comment">// 绑定style样式--对象方法    </span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;basic&quot;</span> <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">&quot;styleObj&quot;</span> <span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token comment">// 绑定style样式--数组方法    </span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;basic&quot;</span> <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">&quot;[styleObj,styleObj2]&quot;</span> <span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;xiayu&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">mood</span><span class="token operator">:</span><span class="token string">&#39;normal&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">arr</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;guigu1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;guigu2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token literal-property property">classObj</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">guigu1</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token literal-property property">guigu2</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">styleObj</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">&#39;40px&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">color</span><span class="token operator">:</span><span class="token string">&#39;yellow&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">styleObj2</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">backgroundColor</span><span class="token operator">:</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token function">chaneMood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;happy&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;normal&#39;</span><span class="token punctuation">]</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>mood <span class="token operator">=</span> arr<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>
    <span class="token punctuation">.</span>basic<span class="token punctuation">{</span><span class="token literal-property property">width</span><span class="token operator">:</span> 400px<span class="token punctuation">;</span>height<span class="token operator">:</span> 100px<span class="token punctuation">;</span>border<span class="token operator">:</span> 1px solid black<span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token punctuation">.</span>normal<span class="token punctuation">{</span>background<span class="token operator">-</span>color<span class="token operator">:</span> skyblue<span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token punctuation">.</span>happy<span class="token punctuation">{</span><span class="token literal-property property">border</span><span class="token operator">:</span> 4px solid red<span class="token punctuation">;</span>background<span class="token operator">-</span>color<span class="token operator">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.644</span><span class="token punctuation">)</span><span class="token punctuation">;</span>background<span class="token operator">:</span> linear<span class="token operator">-</span><span class="token function">gradient</span><span class="token punctuation">(</span>30deg<span class="token punctuation">,</span>yellow<span class="token punctuation">,</span>pink<span class="token punctuation">,</span>orange<span class="token punctuation">,</span>yellow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token punctuation">.</span>guigu1<span class="token punctuation">{</span>border<span class="token operator">-</span>radius<span class="token operator">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token punctuation">.</span>guigu2<span class="token punctuation">{</span>border<span class="token operator">-</span>color<span class="token operator">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="条件渲染" tabindex="-1"><a class="header-anchor" href="#条件渲染" aria-hidden="true">#</a> 条件渲染</h2><p><strong>变化频率高最好用v-show;变化频率低可以用v-if;vue-if会改变结构</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;root&quot;</span><span class="token operator">&gt;</span>
    <span class="token comment">/* 使用v-show做条件渲染 
    &lt;h2 v-show=&quot;false&quot;&gt;欢迎你{{name}}&lt;/h2&gt; 
    &lt;h2 v-show=&quot;1 === 1&quot;&gt;欢迎你{{name}}&lt;/h2&gt; */</span>

    <span class="token comment">// 使用v-if做条件渲染</span>
    <span class="token comment">// &lt;h2 v-if=&quot;false&quot;&gt;欢迎你{{name}}&lt;/h2&gt;</span>
    <span class="token operator">&lt;</span>h2 v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">&quot;1 === 1&quot;</span><span class="token operator">&gt;</span>欢迎你<span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>

    <span class="token comment">/* &lt;h2&gt;当前n的值时：{{n}}&lt;/h2&gt;
    &lt;button @click=&quot;n++&quot;&gt;点我+1&lt;/button&gt;
    &lt;div v-if=&quot;n === 1&quot;&gt;Angular&lt;/div&gt;
    &lt;div v-else-if=&quot;n === 2&quot;&gt;React&lt;/div&gt;
    &lt;div v-else-if=&quot;n === 3&quot;&gt;Vue&lt;/div&gt;
    &lt;div v-else&gt;hahaha&lt;/div&gt;     */</span>
    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>当前n的值时：<span class="token punctuation">{</span><span class="token punctuation">{</span>n<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;n++&quot;</span><span class="token operator">&gt;</span>点我<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token comment">// v-if 和template 配合使用 </span>
    <span class="token operator">&lt;</span>template  v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">&quot;n===1&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>你好<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>现在<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>下雨<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="列表渲染" tabindex="-1"><a class="header-anchor" href="#列表渲染" aria-hidden="true">#</a> 列表渲染</h2><h3 id="列表过滤" tabindex="-1"><a class="header-anchor" href="#列表过滤" aria-hidden="true">#</a> 列表过滤</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;root&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 遍历数组 <span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>人员列表（遍历数组）<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;p of persons&quot;</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">&quot;p.id&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>p<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">{</span><span class="token punctuation">{</span>p<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span> <span class="token operator">--</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;(p,index) in persons&quot;</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">&quot;index&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>p<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">{</span><span class="token punctuation">{</span>p<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>

    <span class="token comment">// 遍历对象 </span>
    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>汽车信息（遍历对象）<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;(value,p) in car&quot;</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">&quot;value&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>p<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">{</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>

    <span class="token comment">// 遍历字符串 </span>
    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>测试遍历字符串（用的少）<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;(char,index) in str&quot;</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">&quot;index&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>char<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">{</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>

    <span class="token comment">// 遍历次数 </span>
    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>测试遍历字符串（用的少）<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;(number,index) in 5&quot;</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">&quot;index&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">{</span><span class="token punctuation">{</span>number<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">persons</span><span class="token operator">:</span><span class="token punctuation">[</span>
            <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">&#39;001&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token string">&#39;18&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">&#39;002&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token string">&#39;19&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">&#39;003&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;王五&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token string">&#39;20&#39;</span><span class="token punctuation">}</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">car</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;奥迪A8&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">price</span><span class="token operator">:</span><span class="token string">&#39;70w&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">color</span><span class="token operator">:</span><span class="token string">&#39;黑色&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">str</span><span class="token operator">:</span><span class="token string">&#39;hello&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="key的原理" tabindex="-1"><a class="header-anchor" href="#key的原理" aria-hidden="true">#</a> key的原理</h3><h4 id="面试题-react、vue中的key有什么作用-key的内部原理" tabindex="-1"><a class="header-anchor" href="#面试题-react、vue中的key有什么作用-key的内部原理" aria-hidden="true">#</a> 面试题：react、vue中的key有什么作用？（key的内部原理）</h4><ol><li>虚拟DOM中key的作用<br> 虚拟DOM对象的标识，当状态中的数据发生变化时，vue会根据【新数据】生成【新的虚拟DOM】，随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</li><li>对比规则： <ol><li>旧虚拟DOM中找到了与虚拟DOM相同的key:若虚拟DOM中内容没变，直接使用之前的真实DOM！若虚拟DOM中内容变了， 则生成新的真实DOM，随后替换掉页面中之前的真实DOM</li><li>旧虚拟DOM中未找到与新虚拟DOM相同的key：创建新的真实DOM，随后渲染到页面</li></ol></li><li>用index作为key可能引发的问题： <ol><li>若对数据进行：逆序添加、逆序删除等破坏顺序的操作：会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题，但效率低</li><li>如果结构中还包含输入类的DOM：会产生错误DOM更新 ==&gt; 界面有问题</li></ol></li><li>开发中如何选择key? <ol><li>最好使用每条数据的唯一标识作为key，比如id、手机号、身份证号、学号等唯一值</li><li>如果不存在对数据的逆序添加、逆序删除等破坏顺序的操作，仅用于渲染列表用于展示，使用index作为key是没有问题的。</li></ol></li></ol><h3 id="过滤小例子" tabindex="-1"><a class="header-anchor" href="#过滤小例子" aria-hidden="true">#</a> 过滤小例子</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>对数组按条件重新渲染以及排序
<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;root&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>人员列表（遍历数组）<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> placeholder<span class="token operator">=</span><span class="token string">&quot;请输入名字&quot;</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;keyWord&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;sortType = 2&quot;</span><span class="token operator">&gt;</span>年龄升序<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;sortType = 1&quot;</span><span class="token operator">&gt;</span>年龄降序<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;sortType = 0&quot;</span><span class="token operator">&gt;</span>原顺序<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;(p,index) in filPersons&quot;</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">&quot;p.id&quot;</span><span class="token operator">&gt;</span>
            <span class="token punctuation">{</span><span class="token punctuation">{</span>p<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">{</span><span class="token punctuation">{</span>p<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token punctuation">{</span><span class="token punctuation">{</span>p<span class="token punctuation">.</span>sex<span class="token punctuation">}</span><span class="token punctuation">}</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">persons</span><span class="token operator">:</span><span class="token punctuation">[</span>
            <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">&#39;001&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;马冬梅&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token string">&#39;30&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">&#39;女&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">&#39;002&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;周冬雨&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token string">&#39;19&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">&#39;女&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">&#39;003&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;周杰伦&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token string">&#39;25&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">&#39;004&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;温兆伦&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token string">&#39;40&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">}</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">keyWord</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">sortType</span><span class="token operator">:</span><span class="token number">0</span>      <span class="token comment">//0原顺序  1降序  2升序</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token function">filPersons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>persons<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> p<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keyWord<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sortType <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p1<span class="token punctuation">,</span>p2</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sortType <span class="token operator">===</span><span class="token number">1</span> <span class="token operator">?</span> p2<span class="token punctuation">.</span>age<span class="token operator">-</span>p1<span class="token punctuation">.</span>age <span class="token operator">:</span> p1<span class="token punctuation">.</span>age<span class="token operator">-</span>p2<span class="token punctuation">.</span>age<span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> arr
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>备注</strong></p><ol><li>indexOf() 方法可返回数组中某个指定的元素位置。该方法将从头到尾地检索数组，看它是否含有对应的元素。开始检索的位置在数组 start 处或数组的开头（没有指定 start 参数时）。如果找到一个 item，则返回 item 的第一次出现的位置。开始位置的索引为 0。 如果在数组中没找到指定元素则返回 -1。</li><li>sort() 方法用于对数组的元素进行排序。排序顺序可以是字母或数字，并按升序或降序。默认排序顺序为按字母升序。<code>升序：arr.sort((a,b) =&gt; {return a-b})</code>，<code>降序：arr.sort((a,b) =&gt; {return b-a})</code></li></ol></blockquote><h3 id="vue数据监测" tabindex="-1"><a class="header-anchor" href="#vue数据监测" aria-hidden="true">#</a> Vue数据监测</h3><h4 id="_1-vue会监视data中所有层次的数据。" tabindex="-1"><a class="header-anchor" href="#_1-vue会监视data中所有层次的数据。" aria-hidden="true">#</a> 1.Vue会监视data中所有层次的数据。</h4><h4 id="_2-如何监测对象中的数据" tabindex="-1"><a class="header-anchor" href="#_2-如何监测对象中的数据" aria-hidden="true">#</a> 2.如何监测对象中的数据？</h4><p>通过setter实现监视，且要在new Vue时就传入要监测的数据</p><ol><li>对象中后追加的属性,Vue默认不做响应式处理</li><li>如需给后添加的属性做响应式，请使用如下API：<br><code>Vue.set(target,propertyName/index,value)</code>或<br><code>vm.$set(target,propertyName/index,value)</code></li></ol><h4 id="_3-如何监测数组中的数据" tabindex="-1"><a class="header-anchor" href="#_3-如何监测数组中的数据" aria-hidden="true">#</a> 3.如何监测数组中的数据？</h4><p>通过包裹数组更新元素的方法实现，本质就是做了两件事：</p><ol><li>调用原生对应的方法对数组进行更新</li><li>重新解析模板，进而更新页面</li></ol><h4 id="_4-在vue修改数组中的某个元素一定要用如下方法" tabindex="-1"><a class="header-anchor" href="#_4-在vue修改数组中的某个元素一定要用如下方法" aria-hidden="true">#</a> 4，在Vue修改数组中的某个元素一定要用如下方法：</h4><ol><li>使用这些API：<code>push(),pop(),shift(),unshift(),splice(),sort(),reverse()</code></li><li>两种set使用方法：<code>Vue.set(), vm.$set()</code></li></ol><h2 id="收集表单数据" tabindex="-1"><a class="header-anchor" href="#收集表单数据" aria-hidden="true">#</a> 收集表单数据</h2><p>若：<code>&lt;input type=&quot;text&quot;&gt;</code>，则v-model收集的是<code>value</code>值，用户输入的就是<code>value</code>值<br> 若：<code>&lt;input type=&quot;radio&quot;&gt;</code>，则v-model收集的是<code>value</code>值，且要给标签配置<code>value</code>值<br> 若：<code>&lt;input type=&quot;checkbox&quot;&gt;</code>，</p><ol><li>没有配置input的value属性，那么收集的就是<code>checked</code>（勾选 or 未勾选，是布尔值）</li><li>配置input的value属性：<br> （1）v-model的初始值是非数组，那么收集的就是<code>checked</code>（勾选 or 未勾选，是布尔值）<br> （2）v-model的初始值是数组，那么收集的就是<code>value</code>组成的数组</li></ol><blockquote><p>备注：v-model的三个修饰符：<code>lazy</code>：失去焦点再收集数据； <code>number</code>：输入字符串转为有效的数字； <code>trim</code>：输入首尾空格过滤</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;root&quot;</span> @submit<span class="token punctuation">.</span>prevent<span class="token operator">=</span><span class="token string">&quot;demo&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;demo&quot;</span><span class="token operator">&gt;</span>账号：<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;demo&quot;</span> v<span class="token operator">-</span>model<span class="token punctuation">.</span>trim<span class="token operator">=</span><span class="token string">&quot;userInfo.account&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;mima&quot;</span><span class="token operator">&gt;</span>密码：<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;password&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;mima&quot;</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;userInfo.password&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;age&quot;</span><span class="token operator">&gt;</span>年龄：<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;number&quot;</span> v<span class="token operator">-</span>model<span class="token punctuation">.</span>number<span class="token operator">=</span><span class="token string">&quot;userInfo.age&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;mima&quot;</span> <span class="token operator">&gt;</span>性别：<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span>
        男<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;radio&quot;</span> name<span class="token operator">=</span><span class="token string">&quot;sex&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;male&quot;</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;userInfo.sex&quot;</span><span class="token operator">&gt;</span> 
        女<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;radio&quot;</span> name<span class="token operator">=</span><span class="token string">&quot;sex&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;female&quot;</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;userInfo.sex&quot;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>br<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;mima&quot;</span><span class="token operator">&gt;</span>爱好：<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span>
        学习<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;checkbox&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;study&quot;</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;userInfo.hobby&quot;</span><span class="token operator">&gt;</span> 
        吃饭<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;checkbox&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;eat&quot;</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;userInfo.hobby&quot;</span><span class="token operator">&gt;</span> 
        打游戏<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;checkbox&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;diet&quot;</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;userInfo.hobby&quot;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>br<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;mima&quot;</span><span class="token operator">&gt;</span>所属校区：<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>select name<span class="token operator">=</span><span class="token string">&quot;&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;&quot;</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;userInfo.city&quot;</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token operator">&gt;</span>请选择校区<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">&quot;beijing&quot;</span> <span class="token operator">&gt;</span>北京<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">&quot;shanghai&quot;</span> <span class="token operator">&gt;</span>上海<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">&quot;nanjing&quot;</span><span class="token operator">&gt;</span>南京<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;mima&quot;</span> <span class="token operator">&gt;</span>其他信息：<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>textarea name<span class="token operator">=</span><span class="token string">&quot;&quot;</span> v<span class="token operator">-</span>model<span class="token punctuation">.</span>lazy<span class="token operator">=</span><span class="token string">&quot;userInfo.other&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;checkbox&quot;</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;userInfo.agree&quot;</span><span class="token operator">&gt;</span>阅读并接受<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&quot;localhost&quot;</span><span class="token operator">&gt;</span>《用户协议》<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>提交<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">userInfo</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token literal-property property">account</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">password</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>
            <span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">&#39;female&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">hobby</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token literal-property property">city</span><span class="token operator">:</span><span class="token string">&#39;beijing&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">other</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">agree</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="过滤器" tabindex="-1"><a class="header-anchor" href="#过滤器" aria-hidden="true">#</a> 过滤器</h2><p><strong>定义：</strong> 对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）<br><strong>语法：</strong></p>`,93),M=s("li",null,"注册过滤器：Vue.filter(name,callback) 或 new Vue(filters:{})",-1),O=o(`<blockquote><p><strong>备注：</strong></p><ol><li>过滤器也可以接受额外参数、多个过滤器也可以串联</li><li>并没有改变原本的数据，是产生新的对应的数据</li></ol></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;root&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>显示格式化后的时间<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
    <span class="token comment">// 过滤器实现(传参) </span>
    <span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>现在是：<span class="token punctuation">{</span><span class="token punctuation">{</span>time <span class="token operator">|</span> <span class="token function">timeFormater</span><span class="token punctuation">(</span><span class="token string">&#39;YYYY-MM-DD&#39;</span><span class="token punctuation">)</span> <span class="token operator">|</span> mySlice<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>h3 <span class="token operator">:</span>x<span class="token operator">=</span><span class="token string">&quot;msg | mySlice&quot;</span><span class="token operator">&gt;</span>xx<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

<span class="token comment">//局部过滤器</span>
<span class="token literal-property property">filters</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token function">timeFormater</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>str<span class="token operator">=</span><span class="token string">&#39;YYYY-MM-DD HH:mm:ss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">dayjs</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">mySlice</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">&#39;mySlice&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内置指令" tabindex="-1"><a class="header-anchor" href="#内置指令" aria-hidden="true">#</a> 内置指令</h2><h3 id="学过的指令" tabindex="-1"><a class="header-anchor" href="#学过的指令" aria-hidden="true">#</a> 学过的指令</h3><ol><li>v-bind : 单向绑定解析表达式, 可简写为 :xxx</li><li>v-model : 双向数据绑定</li><li>v-for : 遍历数组/对象/字符串</li><li>v-on : 绑定事件监听, 可简写为@</li><li>v-if : 条件渲染（动态控制节点是否存存在）</li><li>v-else : 条件渲染（动态控制节点是否存存在）</li><li>v-show : 条件渲染 (动态控制节点是否展示)</li></ol><h3 id="v-text指令" tabindex="-1"><a class="header-anchor" href="#v-text指令" aria-hidden="true">#</a> v-text指令</h3>`,6),C=s("li",null,[s("strong",null,"作用："),n(" 向其所在的节点中渲染文本内容。")],-1),I=s("strong",null,"与插值语法的区别：",-1),D=s("h3",{id:"v-html指令",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#v-html指令","aria-hidden":"true"},"#"),n(" v-html指令")],-1),N=s("li",null,[s("strong",null,"作用："),n(" 向指定节点中渲染包含html结构的内容")],-1),T=s("strong",null,"与插值语法的区别：",-1),F=s("li",null,"v-html可以识别html结构",-1),H=s("li",null,[s("strong",null,"严重注意："),n(" v-html有安全性问题！！！ "),s("ol",null,[s("li",null,"在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击"),s("li",null,"一定要在可信的内容上使用v-html，永远不要用在用户提交的指令上")])],-1),P=s("h3",{id:"v-cloak指令-没有值",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#v-cloak指令-没有值","aria-hidden":"true"},"#"),n(" v-cloak指令（没有值）")],-1),Y=s("li",null,"本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性",-1),$=o(`<h3 id="v-once指令" tabindex="-1"><a class="header-anchor" href="#v-once指令" aria-hidden="true">#</a> v-once指令</h3><ol><li>v-once所在节点在初次动态渲染后，就视为静态内容了</li><li>以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能</li></ol><h3 id="v-pre指令" tabindex="-1"><a class="header-anchor" href="#v-pre指令" aria-hidden="true">#</a> v-pre指令</h3><ol><li>跳过其所在节点的编译过程</li><li>可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译</li></ol><h2 id="自定义指令" tabindex="-1"><a class="header-anchor" href="#自定义指令" aria-hidden="true">#</a> 自定义指令</h2><h3 id="定义语法" tabindex="-1"><a class="header-anchor" href="#定义语法" aria-hidden="true">#</a> 定义语法</h3><ol><li>局部指令：new Vue({directives:(指令名：配置对象) }) 或 new Vue({directives:(指令名：回调函数) })</li><li>全局指令：Vue.directive(指令名，配置对象) 或 Vue.directive(指令名，配置对象)</li></ol><h3 id="配置对象中常用的3个回调" tabindex="-1"><a class="header-anchor" href="#配置对象中常用的3个回调" aria-hidden="true">#</a> 配置对象中常用的3个回调</h3><ol><li>bind：指令与元素成功绑定时调用</li><li>inserted:指令所在元素被插入页面时调用</li><li>updated:指令所在模板结构被重新解析时调用</li></ol><blockquote><p><strong>备注：</strong></p><ol><li>指令定义时不加v-，但同时使用时要加v-;</li><li>指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名</li></ol></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;root&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>当前n值是<span class="token operator">:</span> <span class="token operator">&lt;</span>span v<span class="token operator">-</span>text<span class="token operator">=</span><span class="token string">&quot;n&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>放大<span class="token number">10</span><span class="token literal-property property">倍的n值是</span><span class="token operator">:</span> <span class="token operator">&lt;</span>span v<span class="token operator">-</span>big<span class="token operator">=</span><span class="token string">&quot;n&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>放大<span class="token number">10</span><span class="token literal-property property">倍的n值是</span><span class="token operator">:</span> <span class="token operator">&lt;</span>span v<span class="token operator">-</span>big<span class="token operator">-</span>number<span class="token operator">=</span><span class="token string">&quot;n&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;n++&quot;</span><span class="token operator">&gt;</span>点我n<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>hr<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> v<span class="token operator">-</span>bind<span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">&quot;n&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> v<span class="token operator">-</span>fbind<span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">&quot;n&quot;</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">directives</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token comment">//directives里的指令都是局部指令</span>
        <span class="token comment">//big函数何时会被调用？</span>
        <span class="token comment">//      1.指令与元素成功绑定时（一上来）</span>
        <span class="token comment">//      2.指令所在的模板被重新解析时</span>
        <span class="token function">big</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;big&#39;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//注意：此处的this是window</span>
            element<span class="token punctuation">.</span>innerText <span class="token operator">=</span> binding<span class="token punctuation">.</span>value
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">//不简写的写法，如果有 &#39;-&#39; 这样的连接就不能简写</span>
        <span class="token string">&#39;big-number&#39;</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>binding<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            element<span class="token punctuation">.</span>innerText <span class="token operator">=</span> binding<span class="token punctuation">.</span>value
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">fbind</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token comment">//指令与元素成功绑定时（一上来）</span>
            <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                element<span class="token punctuation">.</span>value <span class="token operator">=</span> binding<span class="token punctuation">.</span>value <span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token comment">//指令所在元素被插入页面时</span>
            <span class="token function">inserted</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                element<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token comment">//指令所在的模板被重新解析时</span>
            <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                element<span class="token punctuation">.</span>value <span class="token operator">=</span> binding<span class="token punctuation">.</span>value
                element<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h2><blockquote><ol><li><strong>又名：</strong> 生命周期回调函数、生命周期函数、生命周期钩子</li><li><strong>是什么：</strong> Vue在关键时刻帮我们调用的一些特殊名称的函数</li><li>生命周期函数的<strong>名字不可更改</strong>，但函数的具体内容是程序员根据需要编写的</li><li>生命周期函数中的<strong>this指向是vm 或 组件实例对象</strong></li></ol></blockquote><figure><img src="`+k+`" alt="生命周期.png" tabindex="0" loading="lazy"><figcaption>生命周期.png</figcaption></figure><h3 id="常用的生命周期钩子" tabindex="-1"><a class="header-anchor" href="#常用的生命周期钩子" aria-hidden="true">#</a> 常用的生命周期钩子</h3><ol><li><strong>mounted：</strong> 发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】</li><li><strong>beforeDestory：</strong> 清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】</li></ol><h3 id="关于销毁vue实例" tabindex="-1"><a class="header-anchor" href="#关于销毁vue实例" aria-hidden="true">#</a> 关于销毁Vue实例</h3><ol><li>销毁后借助Vue开发者工具看不到任何信息</li><li>销毁后自定义事件会失效，但原生DOM事件依然有效</li><li>一般不会在beforeDestory操作数据，因为即便操作数据，也不会再触发更新流程了</li></ol><h2 id="非单文件组件" tabindex="-1"><a class="header-anchor" href="#非单文件组件" aria-hidden="true">#</a> 非单文件组件</h2><h3 id="vue中使用组件的三大步骤" tabindex="-1"><a class="header-anchor" href="#vue中使用组件的三大步骤" aria-hidden="true">#</a> Vue中使用组件的三大步骤</h3><h4 id="一、定义组件-创建组件" tabindex="-1"><a class="header-anchor" href="#一、定义组件-创建组件" aria-hidden="true">#</a> 一、定义组件（创建组件）</h4><p>使用Vue.extend(options)创建，其中options和new Vue(options)时传入的那个options几乎一样。但也有点区别<br><strong>区别如下：</strong></p><ol><li><strong>el不要写</strong>，为什么？ ———— 最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器</li><li><strong>data必须写成函数</strong>，为什么？ ———— 避免组件被复用时，数据存在引用关系。</li></ol><blockquote><p>备注：使用template可以配置组件结构</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> student <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;
                    &lt;h2&gt;学生姓名：{{studentName}}&lt;/h2&gt;
                    &lt;h2&gt;学生年龄：{{age}}&lt;/h2&gt;
                    &lt;/div&gt;
        </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">studentName</span><span class="token operator">:</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">16</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二、注册组件" tabindex="-1"><a class="header-anchor" href="#二、注册组件" aria-hidden="true">#</a> 二、注册组件</h3><ol><li>局部注册：靠new Vue的时候传入components选项</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span> 
    <span class="token literal-property property">student</span><span class="token operator">:</span>student<span class="token punctuation">,</span>
 <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>全局注册：靠Vue.component(&#39;组件名&#39;，组件)</li></ol><h3 id="三、使用组件-编写组件标签" tabindex="-1"><a class="header-anchor" href="#三、使用组件-编写组件标签" aria-hidden="true">#</a> 三、使用组件（编写组件标签）</h3><pre><code>    &lt;school&gt;&lt;/school&gt;
</code></pre><h3 id="几个注意点" tabindex="-1"><a class="header-anchor" href="#几个注意点" aria-hidden="true">#</a> 几个注意点</h3><ol><li>关于组件名：<br> 一个单词组成：<br> 第一种写法(首字母小写)：school; 第二种写法(首字母大写)：School<br> 多个单词组成：<br> 第一种写法(kebab-case命名)：my-school; 第二种写法(CamelCase命名)：MySchool（需要Vue脚手架支持） <blockquote><p><strong>备注：</strong><br> （1）组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行<br> （2）可以使用name配置项指定组件在开发者工具中呈现的名字</p></blockquote></li><li>关于组件标签<br> 第一种写法：<code>&lt;school&gt;&lt;/school&gt;</code><br> 第二种写法：<code>&lt;school/&gt;</code><blockquote><p>备注：不使用脚手架时，<code>&lt;school/&gt;</code>会导致后续组件不能渲染</p></blockquote></li></ol><p>3.一个简写方式：<br><code>const school = Vue.extend(options)</code> 可简写为：<code>const school = options</code></p><h3 id="关于vuecomponent" tabindex="-1"><a class="header-anchor" href="#关于vuecomponent" aria-hidden="true">#</a> 关于VueComponent:</h3><ol><li>school组件本质是一个名为<code>VueComponent</code>的构造函数，且不是程序员定义的，是<code>Vue.extend</code>生成的</li><li>我们只需要写<code>&lt;school/</code>&gt;或<code>&lt;school&gt;&lt;/school&gt;</code>，Vue解析时会帮我们创建school组件的实例对象,即Vue帮我们执行的：<code>new VueComponent(options)</code></li><li><strong>特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent！！！</strong></li><li>关于this指向：<br> （1）<strong>组件配置中</strong>：data函数、methods中的函数、watch中的函数、computed的函数 它们的<strong>this均是【VueComponent实例对象】</strong><br> （2）<strong>new Vue(options)配置中</strong>：data函数、methods中的函数、watch中的函数、computed的函数 它们的<strong>this均是【Vue实例对象(vm)】</strong></li><li>VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）。<br> Vue的实例对象，以后简称vm</li></ol><blockquote><ol><li>一个重要的内置关系：VueComponent.prototype.<strong>proto</strong> === Vue.prototype</li><li>为什么要有这个关系：让组件实例对象（vc）可以访问到Vue原型上的属性、方法</li></ol></blockquote><figure><img src="`+d+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="单文件组件" tabindex="-1"><a class="header-anchor" href="#单文件组件" aria-hidden="true">#</a> 单文件组件</h2>',39),L={href:"https://cn.vuejs.org/guide/scaling-up/sfc.html",target:"_blank",rel:"noopener noreferrer"},A=o(`<h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h3><p>Vue 的单文件组件 (即 <code>*.vue</code> 文件，英文 Single-File Component，简称 <strong>SFC</strong>) 是一种特殊的文件格式，使我们能够将一个 Vue 组件的模板、逻辑与样式封装在单个文件中。下面是一个单文件组件的示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> greeting <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;greeting&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> greeting <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>
<span class="token punctuation">.</span>greeting <span class="token punctuation">{</span>
  <span class="token literal-property property">color</span><span class="token operator">:</span> red<span class="token punctuation">;</span>
  font<span class="token operator">-</span>weight<span class="token operator">:</span> bold<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),E=s("code",null,"<template>",-1),J=s("code",null,"<script>",-1),z=s("code",null,"<style>",-1),B={href:"https://cn.vuejs.org/api/sfc-spec.html",target:"_blank",rel:"noopener noreferrer"},W=s("h3",{id:"为什么要使用-sfc",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#为什么要使用-sfc","aria-hidden":"true"},"#"),n(" 为什么要使用 SFC")],-1),R=s("p",null,"使用 SFC 必须使用构建工具，但作为回报带来了以下优点：",-1),X=s("li",null,"使用熟悉的 HTML、CSS 和 JavaScript 语法编写模块化的组件",-1),G={href:"https://cn.vuejs.org/guide/scaling-up/sfc.html#what-about-separation-of-concerns",target:"_blank",rel:"noopener noreferrer"},K=s("li",null,"预编译模板，避免运行时的编译开销",-1),Q={href:"https://cn.vuejs.org/api/sfc-css-features.html",target:"_blank",rel:"noopener noreferrer"},U={href:"https://cn.vuejs.org/api/sfc-script-setup.html",target:"_blank",rel:"noopener noreferrer"},Z=s("li",null,"通过交叉分析模板和逻辑代码能进行更多编译时优化",-1),ss={href:"https://cn.vuejs.org/guide/scaling-up/tooling.html#ide-support",target:"_blank",rel:"noopener noreferrer"},ns=s("li",null,"开箱即用的模块热更新 (HMR) 支持",-1),as=s("p",null,"SFC 是 Vue 框架提供的一个功能，并且在下列场景中都是官方推荐的项目组织方式：",-1),ts=s("ul",null,[s("li",null,"单页面应用 (SPA)"),s("li",null,"静态站点生成 (SSG)"),s("li",null,"任何值得引入构建步骤以获得更好的开发体验 (DX) 的项目")],-1),ps={href:"https://github.com/vuejs/petite-vue",target:"_blank",rel:"noopener noreferrer"},es=s("h3",{id:"sfc-是如何工作的",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#sfc-是如何工作的","aria-hidden":"true"},"#"),n(" SFC 是如何工作的")],-1),os={href:"https://github.com/vuejs/core/tree/main/packages/compiler-sfc",target:"_blank",rel:"noopener noreferrer"},ls=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> MyComponent <span class="token keyword">from</span> <span class="token string">&#39;./MyComponent.vue&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    MyComponent
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function rs(p,cs){const a=r("ExternalLinkIcon");return c(),i("div",null,[m,u(" more "),b,s("ol",null,[g,h,y,q,f,s("li",null,e(p.xxx)+"中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性；",1),x]),w,s("p",null,[_,n(" 用于解析标签体内容。"),j,V,n(e(p.xxx)+",xxx是js表达式，且可以直接读取到data中的所有属性。",1)]),S,s("ol",null,[M,s("li",null,"使用过滤器："+e(p.xxx|p.过滤器名)+' 或 v-bind:属性 = "xxx | 过滤器名"',1)]),O,s("ol",null,[C,s("li",null,[I,n(" v-text会替换掉节点中的内容，"+e(p.xx)+"则不会。",1)])]),D,s("ol",null,[N,s("li",null,[T,s("ol",null,[s("li",null,"v.html会替换掉节点中所有的内容，"+e(p.xx)+"则不会",1),F])]),H]),P,s("ol",null,[Y,s("li",null,"使用cloak配合v-cloak可以解决网速慢时页面展示出"+e(p.xxx)+"的问题",1)]),$,s("p",null,[n("此处直接复制的vue2官网的单文件组件介绍,可以直接点击查看"),s("a",L,[n("https://cn.vuejs.org/guide/scaling-up/sfc.html"),t(a)])]),A,s("p",null,[n("如你所见，Vue 的单文件组件是网页开发中 HTML、CSS 和 JavaScript 三种语言经典组合的自然延伸。"),E,n("、"),J,n(" 和 "),z,n(" 三个块在同一个文件中封装、组合了组件的视图、逻辑和样式。完整的语法定义可以查阅 "),s("a",B,[n("SFC 语法说明"),t(a)]),n("。")]),W,R,s("ul",null,[X,s("li",null,[s("a",G,[n("让本来就强相关的关注点自然内聚"),t(a)])]),K,s("li",null,[s("a",Q,[n("组件作用域的 CSS"),t(a)])]),s("li",null,[s("a",U,[n("在使用组合式 API 时语法更简单"),t(a)])]),Z,s("li",null,[s("a",ss,[n("更好的 IDE 支持"),t(a)]),n("，提供自动补全和对模板中表达式的类型检查")]),ns]),as,ts,s("p",null,[n("当然，在一些轻量级场景下使用 SFC 会显得有些杀鸡用牛刀。因此 Vue 同样也可以在无构建步骤的情况下以纯 JavaScript 方式使用。如果你的用例只需要给静态 HTML 添加一些简单的交互，你可以看看 "),s("a",ps,[n("petite-vue"),t(a)]),n("，它是一个 6 kB 左右、预优化过的 Vue 子集，更适合渐进式增强的需求。")]),es,s("p",null,[n("Vue SFC 是一个框架指定的文件格式，因此必须交由 "),s("a",os,[n("@vue/compiler-sfc"),t(a)]),n(" 编译为标准的 JavaScript 和 CSS，一个编译后的 SFC 是一个标准的 JavaScript(ES) 模块，这也意味着在构建配置正确的前提下，你可以像导入其他 ES 模块一样导入 SFC：")]),ls])}const ks=l(v,[["render",rs],["__file","vue2-note1.html.vue"]]);export{ks as default};
